# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class LoadMetricInformation(Model):
    """Represents data structure that contains load information for a certain
    metric in a cluster.

    :param name: Name of the metric for which this load information is
     provided.
    :type name: str
    :param is_balanced_before: Value that indicates whether the metrics is
     balanced or not before resource balancer run
    :type is_balanced_before: bool
    :param is_balanced_after: Value that indicates whether the metrics is
     balanced or not after resource balancer run.
    :type is_balanced_after: bool
    :param deviation_before: The standard average deviation of the metrics
     before resource balancer run.
    :type deviation_before: str
    :param deviation_after: The standard average deviation of the metrics
     after resource balancer run.
    :type deviation_after: str
    :param balancing_threshold: The balancing threshold for a certain metric.
    :type balancing_threshold: str
    :param action: The current action being taken with regard to this metric
    :type action: str
    :param activity_threshold: The Activity Threshold specified for this
     metric in the system Cluster Manifest.
    :type activity_threshold: str
    :param cluster_capacity: The total cluster capacity for a given metric
    :type cluster_capacity: str
    :param cluster_load: The total cluster load. In future releases of Service
     Fabric this parameter will be deprecated in favor of CurrentClusterLoad.
    :type cluster_load: str
    :param current_cluster_load: The total cluster load.
    :type current_cluster_load: str
    :param cluster_remaining_capacity: The remaining capacity for the metric
     in the cluster. In future releases of Service Fabric this parameter will
     be deprecated in favor of ClusterCapacityRemaining.
    :type cluster_remaining_capacity: str
    :param cluster_capacity_remaining: The remaining capacity for the metric
     in the cluster.
    :type cluster_capacity_remaining: str
    :param is_cluster_capacity_violation: Indicates that the metric is
     currently over capacity in the cluster.
    :type is_cluster_capacity_violation: bool
    :param node_buffer_percentage: The reserved percentage of total node
     capacity for this metric.
    :type node_buffer_percentage: str
    :param cluster_buffered_capacity: Remaining capacity in the cluster
     excluding the reserved space. In future releases of Service Fabric this
     parameter will be deprecated in favor of BufferedClusterCapacityRemaining.
    :type cluster_buffered_capacity: str
    :param buffered_cluster_capacity_remaining: Remaining capacity in the
     cluster excluding the reserved space.
    :type buffered_cluster_capacity_remaining: str
    :param cluster_remaining_buffered_capacity: The remaining percentage of
     cluster total capacity for this metric.
    :type cluster_remaining_buffered_capacity: str
    :param min_node_load_value: The minimum load on any node for this metric.
     In future releases of Service Fabric this parameter will be deprecated in
     favor of MinimumNodeLoad.
    :type min_node_load_value: str
    :param minimum_node_load: The minimum load on any node for this metric.
    :type minimum_node_load: str
    :param min_node_load_node_id: The node id of the node with the minimum
     load for this metric.
    :type min_node_load_node_id: ~azure.servicefabric.models.NodeId
    :param max_node_load_value: The maximum load on any node for this metric.
     In future releases of Service Fabric this parameter will be deprecated in
     favor of MaximumNodeLoad.
    :type max_node_load_value: str
    :param maximum_node_load: The maximum load on any node for this metric.
    :type maximum_node_load: str
    :param max_node_load_node_id: The node id of the node with the maximum
     load for this metric.
    :type max_node_load_node_id: ~azure.servicefabric.models.NodeId
    :param planned_load_removal: This value represents the load of the
     replicas that are planned to be removed in the future within the cluster.
     This kind of load is reported for replicas that are currently being moving
     to other nodes and for replicas that are currently being dropped but still
     use the load on the source node.
    :type planned_load_removal: str
    """

    _attribute_map = {
        'name': {'key': 'Name', 'type': 'str'},
        'is_balanced_before': {'key': 'IsBalancedBefore', 'type': 'bool'},
        'is_balanced_after': {'key': 'IsBalancedAfter', 'type': 'bool'},
        'deviation_before': {'key': 'DeviationBefore', 'type': 'str'},
        'deviation_after': {'key': 'DeviationAfter', 'type': 'str'},
        'balancing_threshold': {'key': 'BalancingThreshold', 'type': 'str'},
        'action': {'key': 'Action', 'type': 'str'},
        'activity_threshold': {'key': 'ActivityThreshold', 'type': 'str'},
        'cluster_capacity': {'key': 'ClusterCapacity', 'type': 'str'},
        'cluster_load': {'key': 'ClusterLoad', 'type': 'str'},
        'current_cluster_load': {'key': 'CurrentClusterLoad', 'type': 'str'},
        'cluster_remaining_capacity': {'key': 'ClusterRemainingCapacity', 'type': 'str'},
        'cluster_capacity_remaining': {'key': 'ClusterCapacityRemaining', 'type': 'str'},
        'is_cluster_capacity_violation': {'key': 'IsClusterCapacityViolation', 'type': 'bool'},
        'node_buffer_percentage': {'key': 'NodeBufferPercentage', 'type': 'str'},
        'cluster_buffered_capacity': {'key': 'ClusterBufferedCapacity', 'type': 'str'},
        'buffered_cluster_capacity_remaining': {'key': 'BufferedClusterCapacityRemaining', 'type': 'str'},
        'cluster_remaining_buffered_capacity': {'key': 'ClusterRemainingBufferedCapacity', 'type': 'str'},
        'min_node_load_value': {'key': 'MinNodeLoadValue', 'type': 'str'},
        'minimum_node_load': {'key': 'MinimumNodeLoad', 'type': 'str'},
        'min_node_load_node_id': {'key': 'MinNodeLoadNodeId', 'type': 'NodeId'},
        'max_node_load_value': {'key': 'MaxNodeLoadValue', 'type': 'str'},
        'maximum_node_load': {'key': 'MaximumNodeLoad', 'type': 'str'},
        'max_node_load_node_id': {'key': 'MaxNodeLoadNodeId', 'type': 'NodeId'},
        'planned_load_removal': {'key': 'PlannedLoadRemoval', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(LoadMetricInformation, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.is_balanced_before = kwargs.get('is_balanced_before', None)
        self.is_balanced_after = kwargs.get('is_balanced_after', None)
        self.deviation_before = kwargs.get('deviation_before', None)
        self.deviation_after = kwargs.get('deviation_after', None)
        self.balancing_threshold = kwargs.get('balancing_threshold', None)
        self.action = kwargs.get('action', None)
        self.activity_threshold = kwargs.get('activity_threshold', None)
        self.cluster_capacity = kwargs.get('cluster_capacity', None)
        self.cluster_load = kwargs.get('cluster_load', None)
        self.current_cluster_load = kwargs.get('current_cluster_load', None)
        self.cluster_remaining_capacity = kwargs.get('cluster_remaining_capacity', None)
        self.cluster_capacity_remaining = kwargs.get('cluster_capacity_remaining', None)
        self.is_cluster_capacity_violation = kwargs.get('is_cluster_capacity_violation', None)
        self.node_buffer_percentage = kwargs.get('node_buffer_percentage', None)
        self.cluster_buffered_capacity = kwargs.get('cluster_buffered_capacity', None)
        self.buffered_cluster_capacity_remaining = kwargs.get('buffered_cluster_capacity_remaining', None)
        self.cluster_remaining_buffered_capacity = kwargs.get('cluster_remaining_buffered_capacity', None)
        self.min_node_load_value = kwargs.get('min_node_load_value', None)
        self.minimum_node_load = kwargs.get('minimum_node_load', None)
        self.min_node_load_node_id = kwargs.get('min_node_load_node_id', None)
        self.max_node_load_value = kwargs.get('max_node_load_value', None)
        self.maximum_node_load = kwargs.get('maximum_node_load', None)
        self.max_node_load_node_id = kwargs.get('max_node_load_node_id', None)
        self.planned_load_removal = kwargs.get('planned_load_removal', None)
