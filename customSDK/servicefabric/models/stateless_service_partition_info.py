# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .service_partition_info import ServicePartitionInfo


class StatelessServicePartitionInfo(ServicePartitionInfo):
    """Information about a partition of a stateless Service Fabric service.

    All required parameters must be populated in order to send to Azure.

    :param health_state: The health state of a Service Fabric entity such as
     Cluster, Node, Application, Service, Partition, Replica etc. Possible
     values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
    :type health_state: str or ~azure.servicefabric.models.HealthState
    :param partition_status: The status of the service fabric service
     partition. Possible values include: 'Invalid', 'Ready', 'NotReady',
     'InQuorumLoss', 'Reconfiguring', 'Deleting'
    :type partition_status: str or
     ~azure.servicefabric.models.ServicePartitionStatus
    :param partition_information: Information about the partition identity,
     partitioning scheme and keys supported by it.
    :type partition_information:
     ~azure.servicefabric.models.PartitionInformation
    :param service_kind: Required. Constant filled by server.
    :type service_kind: str
    :param instance_count: Number of instances of this partition.
    :type instance_count: long
    :param min_instance_count: MinInstanceCount is the minimum number of
     instances that must be up to meet the EnsureAvailability safety check
     during operations like upgrade or deactivate node.
     The actual number that is used is max( MinInstanceCount, ceil(
     MinInstancePercentage/100.0 * InstanceCount) ).
     Note, if InstanceCount is set to -1, during MinInstanceCount computation
     -1 is first converted into the number of nodes on which the instances are
     allowed to be placed according to the placement constraints on the
     service.
    :type min_instance_count: int
    :param min_instance_percentage: MinInstancePercentage is the minimum
     percentage of InstanceCount that must be up to meet the EnsureAvailability
     safety check during operations like upgrade or deactivate node.
     The actual number that is used is max( MinInstanceCount, ceil(
     MinInstancePercentage/100.0 * InstanceCount) ).
     Note, if InstanceCount is set to -1, during MinInstancePercentage
     computation, -1 is first converted into the number of nodes on which the
     instances are allowed to be placed according to the placement constraints
     on the service.
    :type min_instance_percentage: int
    """

    _validation = {
        'service_kind': {'required': True},
    }

    _attribute_map = {
        'health_state': {'key': 'HealthState', 'type': 'str'},
        'partition_status': {'key': 'PartitionStatus', 'type': 'str'},
        'partition_information': {'key': 'PartitionInformation', 'type': 'PartitionInformation'},
        'service_kind': {'key': 'ServiceKind', 'type': 'str'},
        'instance_count': {'key': 'InstanceCount', 'type': 'long'},
        'min_instance_count': {'key': 'MinInstanceCount', 'type': 'int'},
        'min_instance_percentage': {'key': 'MinInstancePercentage', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(StatelessServicePartitionInfo, self).__init__(**kwargs)
        self.instance_count = kwargs.get('instance_count', None)
        self.min_instance_count = kwargs.get('min_instance_count', None)
        self.min_instance_percentage = kwargs.get('min_instance_percentage', None)
        self.service_kind = 'Stateless'
