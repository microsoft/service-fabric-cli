# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .partition_event import PartitionEvent


class ChaosMoveSecondaryFaultScheduledEvent(PartitionEvent):
    """Chaos Move Secondary Fault Scheduled event.

    :param event_instance_id: The identifier for the FabricEvent instance.
    :type event_instance_id: str
    :param time_stamp: The time event was logged.
    :type time_stamp: datetime
    :param has_correlated_events: Shows there is existing related events
     available.
    :type has_correlated_events: bool
    :param kind: Constant filled by server.
    :type kind: str
    :param partition_id: An internal ID used by Service Fabric to uniquely
     identify a partition. This is a randomly generated GUID when the service
     was created. The partition ID is unique and does not change for the
     lifetime of the service. If the same service was deleted and recreated the
     IDs of its partitions would be different.
    :type partition_id: str
    :param fault_group_id: Id of fault group.
    :type fault_group_id: str
    :param fault_id: Id of fault.
    :type fault_id: str
    :param service_name: Service name.
    :type service_name: str
    :param source_node: The name of a Service Fabric node.
    :type source_node: str
    :param destination_node: The name of a Service Fabric node.
    :type destination_node: str
    :param forced_move: Indicates a forced move.
    :type forced_move: bool
    """

    _validation = {
        'event_instance_id': {'required': True},
        'time_stamp': {'required': True},
        'kind': {'required': True},
        'partition_id': {'required': True},
        'fault_group_id': {'required': True},
        'fault_id': {'required': True},
        'service_name': {'required': True},
        'source_node': {'required': True},
        'destination_node': {'required': True},
        'forced_move': {'required': True},
    }

    _attribute_map = {
        'event_instance_id': {'key': 'EventInstanceId', 'type': 'str'},
        'time_stamp': {'key': 'TimeStamp', 'type': 'iso-8601'},
        'has_correlated_events': {'key': 'HasCorrelatedEvents', 'type': 'bool'},
        'kind': {'key': 'Kind', 'type': 'str'},
        'partition_id': {'key': 'PartitionId', 'type': 'str'},
        'fault_group_id': {'key': 'FaultGroupId', 'type': 'str'},
        'fault_id': {'key': 'FaultId', 'type': 'str'},
        'service_name': {'key': 'ServiceName', 'type': 'str'},
        'source_node': {'key': 'SourceNode', 'type': 'str'},
        'destination_node': {'key': 'DestinationNode', 'type': 'str'},
        'forced_move': {'key': 'ForcedMove', 'type': 'bool'},
    }

    def __init__(self, event_instance_id, time_stamp, partition_id, fault_group_id, fault_id, service_name, source_node, destination_node, forced_move, has_correlated_events=None):
        super(ChaosMoveSecondaryFaultScheduledEvent, self).__init__(event_instance_id=event_instance_id, time_stamp=time_stamp, has_correlated_events=has_correlated_events, partition_id=partition_id)
        self.fault_group_id = fault_group_id
        self.fault_id = fault_id
        self.service_name = service_name
        self.source_node = source_node
        self.destination_node = destination_node
        self.forced_move = forced_move
        self.kind = 'ChaosMoveSecondaryFaultScheduled'
