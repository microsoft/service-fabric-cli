# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING

from msrest import Serializer

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models as _models
from .._vendor import _convert_request, _format_url_section

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Optional, TypeVar, Union
    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False
# fmt: off

def build_add_value_request(
    secret_resource_name,  # type: str
    secret_value_resource_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    api_version = kwargs.pop('api_version', "9.0.0.46")  # type: str
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}")
    path_format_arguments = {
        "secretResourceName": _SERIALIZER.url("secret_resource_name", secret_resource_name, 'str', skip_quote=True),
        "secretValueResourceName": _SERIALIZER.url("secret_value_resource_name", secret_value_resource_name, 'str', skip_quote=True),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        _header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="PUT",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        **kwargs
    )


def build_get_request(
    secret_resource_name,  # type: str
    secret_value_resource_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    api_version = kwargs.pop('api_version', "9.0.0.46")  # type: str

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}")
    path_format_arguments = {
        "secretResourceName": _SERIALIZER.url("secret_resource_name", secret_resource_name, 'str', skip_quote=True),
        "secretValueResourceName": _SERIALIZER.url("secret_value_resource_name", secret_value_resource_name, 'str', skip_quote=True),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        **kwargs
    )


def build_delete_request(
    secret_resource_name,  # type: str
    secret_value_resource_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    api_version = kwargs.pop('api_version', "9.0.0.46")  # type: str

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}")
    path_format_arguments = {
        "secretResourceName": _SERIALIZER.url("secret_resource_name", secret_resource_name, 'str', skip_quote=True),
        "secretValueResourceName": _SERIALIZER.url("secret_value_resource_name", secret_value_resource_name, 'str', skip_quote=True),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="DELETE",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        **kwargs
    )


def build_list_request(
    secret_resource_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    api_version = kwargs.pop('api_version', "9.0.0.46")  # type: str

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/Resources/Secrets/{secretResourceName}/values")
    path_format_arguments = {
        "secretResourceName": _SERIALIZER.url("secret_resource_name", secret_resource_name, 'str', skip_quote=True),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        **kwargs
    )


def build_show_request(
    secret_resource_name,  # type: str
    secret_value_resource_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    api_version = kwargs.pop('api_version', "9.0.0.46")  # type: str

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}/list_value")
    path_format_arguments = {
        "secretResourceName": _SERIALIZER.url("secret_resource_name", secret_resource_name, 'str', skip_quote=True),
        "secretValueResourceName": _SERIALIZER.url("secret_value_resource_name", secret_value_resource_name, 'str', skip_quote=True),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    _query_parameters['api-version'] = _SERIALIZER.query("api_version", api_version, 'str')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        **kwargs
    )

# fmt: on
class MeshSecretValueOperations(object):
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.servicefabric.ServiceFabricClientAPIs`'s
        :attr:`mesh_secret_value` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs):
        args = list(args)
        self._client = args.pop(0) if args else kwargs.pop("client")
        self._config = args.pop(0) if args else kwargs.pop("config")
        self._serialize = args.pop(0) if args else kwargs.pop("serializer")
        self._deserialize = args.pop(0) if args else kwargs.pop("deserializer")


    @distributed_trace
    def add_value(
        self,
        secret_resource_name,  # type: str
        secret_value_resource_name,  # type: str
        name,  # type: str
        value=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> Optional["_models.SecretValueResourceDescription"]
        """Adds the specified value as a new version of the specified secret resource.

        Creates a new value of the specified secret resource. The name of the value is typically the
        version identifier. Once created the value cannot be changed.

        :param secret_resource_name: The name of the secret resource.
        :type secret_resource_name: str
        :param secret_value_resource_name: The name of the secret resource value which is typically the
         version identifier for the value.
        :type secret_value_resource_name: str
        :param name: Version identifier of the secret value.
        :type name: str
        :param value: The actual value of the secret. Default value is None.
        :type value: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SecretValueResourceDescription, or the result of cls(response)
        :rtype: ~azure.servicefabric.models.SecretValueResourceDescription or None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[Optional["_models.SecretValueResourceDescription"]]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "9.0.0.46")  # type: str
        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _secret_value_resource_description = _models.SecretValueResourceDescription(name=name, value=value)
        _json = self._serialize.body(_secret_value_resource_description, 'SecretValueResourceDescription')

        request = build_add_value_request(
            secret_resource_name=secret_resource_name,
            secret_value_resource_name=secret_value_resource_name,
            api_version=api_version,
            content_type=content_type,
            json=_json,
            template_url=self.add_value.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 201, 202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.FabricError, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('SecretValueResourceDescription', pipeline_response)

        if response.status_code == 201:
            deserialized = self._deserialize('SecretValueResourceDescription', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    add_value.metadata = {'url': "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}"}  # type: ignore


    @distributed_trace
    def get(
        self,
        secret_resource_name,  # type: str
        secret_value_resource_name,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.SecretValueResourceDescription"
        """Gets the specified secret value resource.

        Get the information about the specified named secret value resources. The information does not
        include the actual value of the secret.

        :param secret_resource_name: The name of the secret resource.
        :type secret_resource_name: str
        :param secret_value_resource_name: The name of the secret resource value which is typically the
         version identifier for the value.
        :type secret_value_resource_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SecretValueResourceDescription, or the result of cls(response)
        :rtype: ~azure.servicefabric.models.SecretValueResourceDescription
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SecretValueResourceDescription"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "9.0.0.46")  # type: str

        
        request = build_get_request(
            secret_resource_name=secret_resource_name,
            secret_value_resource_name=secret_value_resource_name,
            api_version=api_version,
            template_url=self.get.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.FabricError, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SecretValueResourceDescription', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {'url': "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}"}  # type: ignore


    @distributed_trace
    def delete(  # pylint: disable=inconsistent-return-statements
        self,
        secret_resource_name,  # type: str
        secret_value_resource_name,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Deletes the specified  value of the named secret resource.

        Deletes the secret value resource identified by the name. The name of the resource is typically
        the version associated with that value. Deletion will fail if the specified value is in use.

        :param secret_resource_name: The name of the secret resource.
        :type secret_resource_name: str
        :param secret_value_resource_name: The name of the secret resource value which is typically the
         version identifier for the value.
        :type secret_value_resource_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "9.0.0.46")  # type: str

        
        request = build_delete_request(
            secret_resource_name=secret_resource_name,
            secret_value_resource_name=secret_value_resource_name,
            api_version=api_version,
            template_url=self.delete.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200, 202, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.FabricError, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {'url': "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}"}  # type: ignore


    @distributed_trace
    def list(
        self,
        secret_resource_name,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.PagedSecretValueResourceDescriptionList"
        """List names of all values of the specified secret resource.

        Gets information about all secret value resources of the specified secret resource. The
        information includes the names of the secret value resources, but not the actual values.

        :param secret_resource_name: The name of the secret resource.
        :type secret_resource_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: PagedSecretValueResourceDescriptionList, or the result of cls(response)
        :rtype: ~azure.servicefabric.models.PagedSecretValueResourceDescriptionList
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.PagedSecretValueResourceDescriptionList"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "9.0.0.46")  # type: str

        
        request = build_list_request(
            secret_resource_name=secret_resource_name,
            api_version=api_version,
            template_url=self.list.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.FabricError, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('PagedSecretValueResourceDescriptionList', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list.metadata = {'url': "/Resources/Secrets/{secretResourceName}/values"}  # type: ignore


    @distributed_trace
    def show(
        self,
        secret_resource_name,  # type: str
        secret_value_resource_name,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.SecretValue"
        """Lists the specified value of the secret resource.

        Lists the decrypted value of the specified named value of the secret resource. This is a
        privileged operation.

        :param secret_resource_name: The name of the secret resource.
        :type secret_resource_name: str
        :param secret_value_resource_name: The name of the secret resource value which is typically the
         version identifier for the value.
        :type secret_value_resource_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SecretValue, or the result of cls(response)
        :rtype: ~azure.servicefabric.models.SecretValue
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.SecretValue"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "9.0.0.46")  # type: str

        
        request = build_show_request(
            secret_resource_name=secret_resource_name,
            secret_value_resource_name=secret_value_resource_name,
            api_version=api_version,
            template_url=self.show.metadata['url'],
        )
        request = _convert_request(request)
        request.url = self._client.format_url(request.url)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.FabricError, pipeline_response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SecretValue', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    show.metadata = {'url': "/Resources/Secrets/{secretResourceName}/values/{secretValueResourceName}/list_value"}  # type: ignore

